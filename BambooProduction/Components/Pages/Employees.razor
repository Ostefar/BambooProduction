@page "/Employees"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IHttpClientFactory Http
@using BambooProduction.Service
@using Microsoft.AspNetCore.Authorization
@using Shared.Dto;

@attribute [Authorize(Roles = "Admin, Employee")]

<PageTitle>Employees</PageTitle>

<div class="input-group mb-3">
    <input type="text" class="form-control" @bind="Input.searchTerm" placeholder="Search by name, phone, email, city, or country" />
    <button class="btn btn-primary" @onclick="SearchEmployees">Search</button>
</div>

<hr />

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>First name</th>
            <th>Last name</th>
            <th>Phone</th>
            <th>Email</th>
            <th>City</th>
            <th>Country</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (filteredEmployees != null && filteredEmployees.Any())
        {
            @foreach (var employee in filteredEmployees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Phone</td>
                    <td>@employee.Email</td>
                    <td>@employee.Address.City</td>
                    <td>@employee.Address.Country</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(employee.Id)">Details</button>
                        </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">No employees found.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<EmployeeDto> employees = new();
    private List<EmployeeDto> filteredEmployees = new();
    private InputModel Input { get; set; } = new();
    private HttpClient EmployeeApiClient;

    protected override async Task OnInitializedAsync()
    {
        EmployeeApiClient = Http.CreateClient("EmployeeApi");
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        var loggedInUserRole = await AuthService.GetUserRoleAsync();
        if (loggedInUserRole == "Admin" || loggedInUserRole == "Employee")
        {
            var requestUrl = $"Employee?loggedInUserRole={Uri.EscapeDataString(loggedInUserRole)}";
            employees = await EmployeeApiClient.GetFromJsonAsync<List<EmployeeDto>>(requestUrl);
            filteredEmployees = employees;
        }
    }

    private void SearchEmployees()
    {
        if (!string.IsNullOrEmpty(Input.searchTerm))
        {
            filteredEmployees = employees.Where(e =>
                e.FirstName.ToLower().Contains(Input.searchTerm.ToLower()) ||
                e.LastName.ToLower().Contains(Input.searchTerm.ToLower()) ||
                e.Phone.ToLower().Contains(Input.searchTerm.ToLower()) ||
                e.Email.ToLower().Contains(Input.searchTerm.ToLower()) ||
                e.Address.City.ToLower().Contains(Input.searchTerm.ToLower()) ||
                e.Address.Country.ToLower().Contains(Input.searchTerm.ToLower())
            ).ToList();
        }
        else
        {
            filteredEmployees = employees;
        }

        StateHasChanged();
    }

    private void ViewDetails(Guid employeeId)
    {
        Navigation.NavigateTo($"/employee-details/{employeeId}");
    }

    private sealed class InputModel
    {
        public string searchTerm { get; set; } = "";
    }
}
