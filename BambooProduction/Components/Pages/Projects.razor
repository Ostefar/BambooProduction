@page "/Projects"
@using BambooProduction.Models.Search
@using BambooProduction.Service
@using Microsoft.AspNetCore.Authorization
@using Shared.Dto
@using Shared.Enums
@rendermode InteractiveServer
@inject AuthService AuthService
@inject IHttpClientFactory Http
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin, Employee")]

<div class="input-group mb-3">
    <input type="text" class="form-control" @bind="Input.searchTerm" placeholder="Search by project name or description" />
    <button class="btn btn-primary" @onclick="SearchProjects">Search</button>
    <button class="btn btn-success ms-2" @onclick="CreateProject">+</button>
</div>



<hr />

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Project name</th>
            <th>Project Description</th>
            <th>Customer</th>
            <th>Employee</th>
            <th>Priority</th>
            <th>Billing type</th>
            <th>Start date</th>
            <th>End date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (filteredProjects != null && filteredProjects.Any())
        {
            @foreach (var data in filteredProjects)
            {
                <tr>
                    <td>@data.ProjectName</td>
                    <td>@data.ProjectDescription</td>
                    <td>@(customerNames.TryGetValue(data.CustomerId, out var companyName) ? companyName : "Unknown")</td>
                    <td>@(employeeNames.TryGetValue(data.EmployeeId, out var employeeName) ? employeeName : "Unknown")</td>
                    <td>@((PriorityEnum)data.Priority)</td>
                    <td>@((BillingTypeEnum)data.BillingType)</td>
                    <td>@data.StartDate.ToString("yyyy-dd-MM")</td>
                    <td>@data.EndDate.ToString("yyyy-dd-MM")</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(data.Id)">Details</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">No projects found.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ProjectDto> projects = new();
    private List<ProjectDto> filteredProjects = new();
    private Dictionary<Guid, string> customerNames = new();
    private Dictionary<Guid, string> employeeNames = new();
    private InputModel Input { get; set; } = new();
    private HttpClient ProjectApiClient;
    private HttpClient EmployeeApiClient;

    protected override async Task OnInitializedAsync()
    {
        ProjectApiClient = Http.CreateClient("ProjectApi");
        EmployeeApiClient = Http.CreateClient("EmployeeApi");
        await LoadProjects();
        await GetCustomersAsync();
        await GetEmployeesAsync();
    }

    private async Task LoadProjects()
    {
        var loggedInUserRole = await AuthService.GetUserRoleAsync();
        if (loggedInUserRole == "Admin" || loggedInUserRole == "Employee")
        {
            var requestUrl = $"Project?loggedInUserRole={Uri.EscapeDataString(loggedInUserRole)}";
            projects = await ProjectApiClient.GetFromJsonAsync<List<ProjectDto>>(requestUrl);
            filteredProjects = projects;
        }
    }

    public async Task<Dictionary<Guid, string>> GetCustomersAsync()
    {
        var loggedInUserRole = await AuthService.GetUserRoleAsync();
        if (loggedInUserRole == "Admin" || loggedInUserRole == "Employee")
        {
            var requestUrl = $"Customer?loggedInUserRole={Uri.EscapeDataString(loggedInUserRole)}";
            var customers = await ProjectApiClient.GetFromJsonAsync<List<CustomerDto>>(requestUrl);
            customerNames = customers.ToDictionary(c => c.Id, c => c.CompanyName);
        }
        return new Dictionary<Guid, string>();

    }

    public async Task<Dictionary<Guid, string>> GetEmployeesAsync()
    {
        var loggedInUserRole = await AuthService.GetUserRoleAsync();
        if (loggedInUserRole == "Admin" || loggedInUserRole == "Employee")
        {
            var requestUrl = $"Employee?loggedInUserRole={Uri.EscapeDataString(loggedInUserRole)}";
            var employees = await EmployeeApiClient.GetFromJsonAsync<List<EmployeeDto>>(requestUrl);
            employeeNames = employees.ToDictionary(e => e.Id, e => e.FirstName + " " + e.LastName);
        }
        return new Dictionary<Guid, string>();

    }

    private void SearchProjects()
    {
        if (!string.IsNullOrEmpty(Input.searchTerm))
        {
            filteredProjects = projects.Where(e =>
                 e.ProjectName.ToLower().Contains(Input.searchTerm.ToLower()) ||
                 e.ProjectDescription.ToLower().Contains(Input.searchTerm.ToLower())
             ).ToList();
        }
        else
        {
            filteredProjects = projects;
        }

        StateHasChanged();
    }

    private void ViewDetails(Guid projectId)
    {
        Navigation.NavigateTo($"/project-details/{projectId}");
    }

    private void CreateProject()
    {
        Navigation.NavigateTo($"/create-project");
    }
}
