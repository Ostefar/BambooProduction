@page "/Economy-employee-details/{employeeEcoId:guid}"
@using BambooProduction.Data
@using BambooProduction.Models.EmployeeEco
@using BambooProduction.Service
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using Shared.Dto
@rendermode InteractiveServer
@inject AuthService AuthService
@inject IHttpClientFactory Http
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<h3>Employee economy details</h3>

<hr />

@if (employeeEco != null)
{
    <EditForm Model="Input" method="put" OnValidSubmit="UpdateEmployeeEco" FormName="UpdateEmployeeEco">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="row">
            <!-- Main form on the left -->
            <div class="col-md-2">
                <!-- Main Form Fields -->
                <div class="form-floating mb-3">
                    <select @bind="selectedEmployeeId" class="form-control" disabled>
                        <option value="">Select a employee</option>
                        @foreach (var employee in employees)
                        {
                            <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                        }
                    </select>
                    <label for="customerId">Assigned employee</label>
                    <ValidationMessage For="() => selectedEmployeeId" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.HourlyWage" class="form-control" placeholder="HourlyWage" />
                    <label for="hourlyWage">Hourly wage</label>
                    <ValidationMessage For="() => Input.HourlyWage" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="Input.SickDaysTotal" class="form-control" placeholder="SickDaysTotal" disabled />
                    <label for="sickDaysTotal">Sick days</label>
                    <ValidationMessage For="() => Input.SickDaysTotal" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="Input.VacationDaysTotal" class="form-control" placeholder="VacationDaysTotal" disabled />
                    <label for="vacationDaysTotal">Vacation days</label>
                    <ValidationMessage For="() => Input.VacationDaysTotal" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputDate @bind-Value="Input.CreatedDate" class="form-control" placeholder="Creation date" min="1900-01-01" max="2100-12-31" disabled />
                    <label for="createdDate">Creation date</label>
                    <ValidationMessage For="() => Input.CreatedDate" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputDate @bind-Value="Input.LastUpdated" class="form-control" placeholder="Last updated" min="1900-01-01" max="2100-12-31" disabled />
                    <label for="lastUpdated">Last updated</label>
                    <ValidationMessage For="() => Input.LastUpdated" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastUpdatedBy" class="form-control" placeholder="Last updated by" disabled />
                    <label for="lastUpdatedBy">Last updated by</label>
                    <ValidationMessage For="() => Input.LastUpdatedBy" class="text-danger" />
                </div>

                <!-- Buttons to show conditional forms -->
                <button type="button" class="w-100 btn btn-lg btn-primary mb-3" @onclick="ToggleVacationForm">Add Vacation</button>
                <button type="button" class="w-100 btn btn-lg btn-primary" @onclick="ToggleSicknessForm">Report Sickness</button>
            </div>

            <!-- Conditional forms on the right -->
            <div class="col-md-2">
                <!-- Vacation Form - Conditionally rendered -->
                @if (showVacationForm)
                {
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="InputEmployeeVacSick.StartDate" class="form-control" placeholder="StartDate" min="1900-01-01" max="2100-12-31" />
                        <label for="startDate">Vacation start date</label>
                        <ValidationMessage For="() => InputEmployeeVacSick.StartDate" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="InputEmployeeVacSick.EndDate" class="form-control" placeholder="EndDate" min="1900-01-01" max="2100-12-31" />
                        <label for="endDate">Vacation end date</label>
                        <ValidationMessage For="() => InputEmployeeVacSick.EndDate" class="text-danger" />
                    </div>

                    <button type="button" class="w-100 btn btn-lg btn-success mb-3" @onclick="SubmitVacationForm">Submit Vacation</button>
                }

                <!-- Sickness Form - Conditionally rendered -->
                @if (showSicknessForm)
                {
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="InputEmployeeVacSick.StartDate" class="form-control" placeholder="StartDate" min="1900-01-01" max="2100-12-31" />
                        <label for="startDate">Sickness start date</label>
                        <ValidationMessage For="() => InputEmployeeVacSick.StartDate" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="InputEmployeeVacSick.EndDate" class="form-control" placeholder="EndDate" min="1900-01-01" max="2100-12-31" />
                        <label for="endDate">Sickness end date</label>
                        <ValidationMessage For="() => InputEmployeeVacSick.EndDate" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="InputEmployeeVacSick.Reason" class="form-control" placeholder="Reason" />
                        <label for="reason">Reason</label>
                        <ValidationMessage For="() => InputEmployeeVacSick.Reason" class="text-danger" />
                    </div>

                    <button type="button" class="w-100 btn btn-lg btn-success" @onclick="SubmitSicknessForm">Submit Sickness</button>
                }
            </div>
        </div>

        <!-- Update Button -->
        <div class="row mt-3">
            <div class="col-md-2">
                <button type="submit" class="w-100 btn btn-lg btn-warning">Update</button>
            </div>

            <div class="col-md-6">
                <MudSnackbarProvider />
            </div>
        </div>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {

    [Parameter] 
    public Guid employeeEcoId { get; set; }
    [SupplyParameterFromForm]
    private UpdateModel Input { get; set; } = new();
    private EmployeeEcoDto employeeEco;
    private HttpClient EconomyApiClient;
    private HttpClient EmployeeApiClient;

    private bool showVacationForm = false;
    private bool showSicknessForm = false;

    private InputVacationOrSickleave InputEmployeeVacSick = new InputVacationOrSickleave();

    private List<EmployeeDto> employees = new();
    private Guid selectedEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        EmployeeApiClient = Http.CreateClient("EmployeeApi");
        EconomyApiClient = Http.CreateClient("EconomyApi");
        await LoadEmployeeEcoDetails();
        await LoadEmployees();
    }

    private void ToggleVacationForm()
    {
        showVacationForm = !showVacationForm;
        showSicknessForm = false; 
    }

    private void ToggleSicknessForm()
    {
        showSicknessForm = !showSicknessForm;
        showVacationForm = false; 
    }

    private async Task SubmitVacationForm()
    {
        var vacation = new VacationDto
        {
            Id = Guid.NewGuid(),
                EmployeeEcoId = employeeEcoId,
            StartDate = InputEmployeeVacSick.StartDate,
            EndDate = InputEmployeeVacSick.EndDate
        };

        // API call to update vacation days
        var response = await EconomyApiClient.PostAsJsonAsync($"EmployeeEco/{employeeEcoId}/addVacation", vacation);

        if (response.IsSuccessStatusCode)
        {
            // If the request is successful, hide the form and maybe reload data
            showVacationForm = false;
            await LoadEmployeeEcoDetails(); // Reload updated employee economy data
            Console.WriteLine("Vacation added successfully.");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to submit vacation: {errorContent}");
        }
    }

    // Handle sickness form submission
    private async Task SubmitSicknessForm()
    {
        var sickLeave = new SickLeaveDto
            {
                Id = Guid.NewGuid(),
                EmployeeEcoId = employeeEcoId,
                StartDate = InputEmployeeVacSick.StartDate,
                EndDate = InputEmployeeVacSick.EndDate,
                Reason = InputEmployeeVacSick.Reason
            };

        // API call to update sickleaves
        var response = await EconomyApiClient.PostAsJsonAsync($"EmployeeEco/{employeeEcoId}/addSickLeave", sickLeave);

        if (response.IsSuccessStatusCode)
        {
            // If the request is successful, hide the form and maybe reload data
            showSicknessForm = false;
            await LoadEmployeeEcoDetails(); // Reload updated employee economy data
            Console.WriteLine("Sickleave added successfully.");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to submit vacation: {errorContent}");
        }
    }

    private async Task LoadEmployees()
    {
        var requestUrl = $"Employee";
        employees = await EmployeeApiClient.GetFromJsonAsync<List<EmployeeDto>>(requestUrl);
    }

    private async Task LoadEmployeeEcoDetails()
    {
        var requestUrl = $"EmployeeEco/{employeeEcoId}";
        employeeEco = await EconomyApiClient.GetFromJsonAsync<EmployeeEcoDto>(requestUrl);

        // Copy data from employeeEco to Input
        if (employeeEco != null)
        {
            Input.EmployeeId = employeeEco.EmployeeId; // show name
            Input.HourlyWage = employeeEco.HourlyWage;
            Input.SickDaysTotal = employeeEco.SickDaysTotal;
            Input.VacationDaysTotal = employeeEco.VacationDaysTotal;
            Input.CreatedDate = employeeEco.CreatedDate;
            Input.LastUpdated = employeeEco.LastUpdated;
            Input.LastUpdatedBy = employeeEco.LastUpdatedBy;

            selectedEmployeeId = employeeEco.EmployeeId;
        }
    }

    private async Task UpdateEmployeeEco()
    {
         var userEmail = "";

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var identityUser = await UserManager.GetUserAsync(user);
        if (identityUser != null)
        {
            userEmail = await UserManager.GetEmailAsync(identityUser);
        }

        var employeeEcoUpdated = new EmployeeEcoDto
            {
                EmployeeId = employeeEcoId,
                HourlyWage = Input.HourlyWage,
                SickDaysTotal = Input.SickDaysTotal,
                VacationDaysTotal = Input.VacationDaysTotal,
                CreatedDate = DateTime.Now,
                LastUpdated = DateTime.Now,
                LastUpdatedBy = userEmail
            };
        var requestUrl = $"EmployeeEco/{employeeEcoId}";
        try
        {
            var response = await EconomyApiClient.PutAsJsonAsync(requestUrl, employeeEcoUpdated);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");  // where to?
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode}, Details: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
