@page "/Account/Register"
@attribute [Authorize(Roles = "Admin")]

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BambooProduction.Models.Employee
@using BambooProduction.Service
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BambooProduction.Data
@using System.Net.Http.Headers
@using global::Shared.Dto
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpClientFactory Http
@inject IAuthenticationService AuthenticationService
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Register</PageTitle>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new employee</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-control">
                    <option value="1">Employee</option>
                    <option value="2">Admin</option>
                </InputSelect>
                <label for="role">Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" />
                <label for="firstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Phone" class="form-control" placeholder="Phone" />
                <label for="phone">Phone</label>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.JobTitle" class="form-control">
                    <option value="1">CEO</option>
                    <option value="2">Sales</option>
                    <option value="3">Production</option>
                </InputSelect>
                <label for="jobTitle">Job Title</label>
                <ValidationMessage For="() => Input.JobTitle" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.BirthDate" class="form-control" placeholder="Birth Date" min="1900-01-01" max="2100-12-31" />
                <label for="birthDate">Birth Date</label>
                <ValidationMessage For="() => Input.BirthDate" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.HiringDate" class="form-control" placeholder="Hiring Date" min="1900-01-01" max="2100-12-31" />
                <label for="hiringDate">Hiring Date</label>
                <ValidationMessage For="() => Input.HiringDate" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.AddressLine" class="form-control" placeholder="Address Line" />
                <label for="addressLine">Address Line</label>
                <ValidationMessage For="() => Input.AddressLine" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.City" class="form-control" placeholder="City" />
                <label for="city">City</label>
                <ValidationMessage For="() => Input.City" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.ZipCode" class="form-control" placeholder="Zip Code" />
                <label for="zipCode">Zip Code</label>
                <ValidationMessage For="() => Input.ZipCode" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Country" class="form-control" placeholder="Country" />
                <label for="country">Country</label>
                <ValidationMessage For="() => Input.Country" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private HttpClient EmployeeApiClient;

    protected override async Task OnInitializedAsync()
    {
        EmployeeApiClient = Http.CreateClient("EmployeeApi");
    }

    public async Task RegisterUser() // EditContext editContext
    {
        var loggedInUserRole = await AuthService.GetUserRoleAsync();
        var userEmail = "";

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = authState.User;
        var identityUser = await UserManager.GetUserAsync(loggedInUser);
        if (identityUser != null)
        {
            userEmail = await UserManager.GetEmailAsync(identityUser);
        }

            var user = CreateUser();
            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }

            Logger.LogInformation("User created a new account with password.");

            // Assign role to the user
            if (Input.Role == 1)
            {
                await UserManager.AddToRoleAsync(user, "Employee");
            }
            else if (Input.Role == 2)
            {
                await UserManager.AddToRoleAsync(user, "Admin");
            }

            var userId = await UserManager.GetUserIdAsync(user); // wrong tager den nye users id istedet for den er logget på

            // Create Employee using the Employee API   
            var employee = new EmployeeDto
                {
                    FirstName = Input.FirstName,
                    LastName = Input.LastName,
                    Phone = Input.Phone,
                    Email = Input.Email,
                    JobTitle = Input.JobTitle,
                    BirthDate = Input.BirthDate,
                    HiringDate = Input.HiringDate,
                    UserId = userId,
                    LoggedInUserRole = loggedInUserRole, 
                    CreatedDate = DateTime.Now,
                    LastUpdated = DateTime.Now,
                    LastUpdatedBy = userEmail,
                    Address = new AddressDto
                    {
                        AddressLine = Input.AddressLine,
                        City = Input.City,
                        ZipCode = Input.ZipCode,
                        Country = Input.Country,
                        CreatedDate = DateTime.Now,
                        LastUpdated = DateTime.Now,
                        LastUpdatedBy = userEmail,
                    }
                };

        var response = await EmployeeApiClient.PostAsJsonAsync("Employee", employee);

            if (!response.IsSuccessStatusCode)
            {
                // Delete the user if the employee creation fails
                Logger.LogInformation("Employee creation failed, deleting user account.");

                var deleteResult = await UserManager.DeleteAsync(user);
                if (!deleteResult.Succeeded)
                {
                    identityErrors = deleteResult.Errors;
                    return;
                }

                identityErrors = new[] { new IdentityError { Description = "Failed to create employee, user account has been deleted." } };
                return;
            }

            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "Account/RegisterConfirmation",
                    new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            RedirectManager.RedirectTo(ReturnUrl);
    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
